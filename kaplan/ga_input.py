"""This module reads and verifies the input related
to the genetic algorithm. It has two functions:
read_ga_input, which takes a str as an argument,
and verify_ga_input, which takes a dict as an
argument. This module is called by the gac
module."""

NUM_GA_ARGS = 12
NUM_MOL_ARGS = 7


def read_ga_input(ga_input_file):
    """Read an input file for genetic algorithm.

    Parameters
    ----------
    ga_input_file : str
        The full path to the ga input file.

    Raises
    ------
    FileNotFoundError
        The given ga_input_file does not exist.
    ValueError
        The number of arguments matches the number
        of expected arguments for the mol_input_file.
        Most likely the order of arguments when
        calling gac module is switched.
        This error is also raised when the number
        of arguments does not match the expected
        value of NUM_GA_ARGS.

    Returns
    -------
    ga_input_dict : dict
        Information stored as a dictionary,
        as taken from the ga_input_file.

    """
    ga_input_dict = dict()
    num_args = 0
    try:
        with open(ga_input_file, 'r') as fout:
            for line in fout:
                # remove \n char and separate keys and values
                line = line[:-1].lower().split(' = ')
                # ignore blank lines/long input
                if len(line) != 2:
                    if line[0] != ['']:
                        print(f"Warning: line - {line} - was ignored from the ga_input_file.")
                    continue
                ga_input_dict[line[0]] = line[1]
                num_args += 1
                # go through each line and pull data and key
    except FileNotFoundError:
        raise FileNotFoundError("No such ga_input_file.")
    if num_args == NUM_MOL_ARGS:
        raise ValueError("Wrong order of input files.")
    if num_args != NUM_GA_ARGS:
        raise ValueError(f"Incorrect # of GA arguments. Given: {num_args}. Needed: {NUM_GA_ARGS}")
    return ga_input_dict


def verify_ga_input(ga_input_dict):
    """Verify the given inputs.

    Parameters
    ----------
    ga_input_dict : dict
        Dictionary generated by reading a
        ga_input_file.

    Raises
    ------
    AssertionError
        Check did not pass.
    ValueError
        Incorrect type of argument. Expects
        float or integer.

    Returns
    -------
    None

    """
    # make sure dict is non-empty
    assert len(ga_input_dict)
    # make sure it is actually a dictionary
    assert isinstance(ga_input_dict, dict)
    # key names
    key_names = {"num_mevs", "num_slots", "num_filled", "num_geoms",
                 "num_atoms", "t_size", "num_muts", "num_swaps", "pmem_dist",
                 "fit_form", "coef_energy", "coef_rmsd"}
    for key in key_names:
        try:
            assert key in ga_input_dict
        except AssertionError:
            raise ValueError(f"Param missing in ga input file: {key}. Check spelling/duplicates.")
    # make sure the inputs are of the correct format
    try:
        for key, value in ga_input_dict.items():
            if not key.startswith('coef'):
                ga_input_dict[key] = int(value)
            else:
                ga_input_dict[key] = float(value)
        # num_slots
        assert 0 < ga_input_dict["num_slots"] >= ga_input_dict["num_filled"]
        # num_filled
        assert ga_input_dict["num_filled"] > 0
        # num_mevs
        assert ga_input_dict["num_mevs"] > 0
        # num_swaps
        assert 0 <= ga_input_dict["num_swaps"] <= ga_input_dict["num_geoms"]
        # num_muts
        assert 0 <= ga_input_dict["num_muts"] <= ga_input_dict["num_atoms"] - 3
        # num_geoms
        assert ga_input_dict["num_geoms"] > 0
        # num_atoms
        assert ga_input_dict["num_atoms"] > 3
        # fit_form
        assert ga_input_dict["fit_form"] == 0
        # pmem_dist
        assert 0 <= ga_input_dict["pmem_dist"] < ga_input_dict["num_slots"]/2
        # coef_energy
        assert ga_input_dict["coef_energy"] >= 0
        # coef_rmsd
        assert ga_input_dict["coef_rmsd"] >= 0
        # t_size must be at least 2 (for 2 parents)
        assert 2 <= ga_input_dict["t_size"] <= ga_input_dict["num_filled"]
    except ValueError:
        raise ValueError("GA input values should be of integer or float type.")
